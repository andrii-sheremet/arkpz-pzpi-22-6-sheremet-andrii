Міністерство освіти і науки України
Харківський національний університет радіоелектроніки



Кафедра Програмна інженерія




ЗВІТ
З лабораторної роботи №2
з дисципліни «Аналіз та рефакторинг коду»






Виконав:									Перевірив:
Ст. групи ПЗПІ-22-6					          ст. викладач каф. ПІ,
Шеремет А. Г.							Сокорчук Ігор Петрович




Харків 2025
РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (API)

1.1 Мета роботи
Метою роботи є розробка бази даних для серверної частини програмної системи та прикладного програмного інтерфейсу. 

1.2 Хід роботи
1.2.1	Розробити будову програмної системи.
Програмна система для догляду за домашніми рослинами побудована за принципом клієнт-серверної архітектури. Серверна частина забезпечує обробку запитів, зберігання даних та управління IoT-пристроями, а клієнтська частина відповідає за взаємодію з користувачем через веб-додаток і мобільний додаток. 
Серверна частина реалізована за допомогою фреймворку Flask на мові програмування Python. Вона забезпечує REST API для взаємодії з клієнтами та IoT-пристроями. Для збереження даних використовується реляційна база даних PostgreSQL. Автентифікація користувачів здійснюється за допомогою JWT токенів. 
Серверна частина складається з наступних модулів:
1.	Модуль авторизації
•	Реєстрація нових користувачів.
•	Вхід до системи з генерацією JWT токена.
•	Відновлення пароля.
2.	Модуль керування профілями користувачів
•	Редагування інформації про користувачів.
•	Зміна налаштувань системи для кожного користувача.
•	Зберігання індивідуальних налаштувань для рослин.
3.	Модуль керування IoT-пристроями
•	Додавання нових IoT-пристроїв до системи.
•	Налаштування параметрів пристроїв (типи рослин, необхідні умови догляду).
•	Відображення статусу підключених пристроїв.
4.	Модуль збору даних з IoT-сенсорів
•	Отримання даних про вологість ґрунту, освітленість, температуру та вологість повітря.
•	Обробка отриманих даних та збереження їх у базі даних.
•	Налаштування автоматичного поливу та освітлення на основі зібраних даних.
5.	Модуль адміністрування
•	Надання адміністративного доступу для управління користувачами та пристроями.
•	Генерація звітів щодо роботи системи та використання ресурсів.
•	Моніторинг стану системи та журнал подій.
Клієнтська частина складається з наступних модулів:
1.	Відображення поточного стану рослин (вологість ґрунту, освітлення, температура).
2.	Налаштування параметрів догляду за рослинами (графік поливу, освітлення, оптимальна температура).
3.	Відображення історії даних та статистики.
4.	Сповіщення про необхідність втручання користувача (перевищення чи зниження порогових значень).
5.	Управління IoT-пристроями та їх налаштування.
6.	Віддалене керування системою (вмикання/вимикання поливу, освітлення тощо).

1.2.2	
Створено UML діаграму прецедентів для серверної частини системи, що представлена на рисунку 1.
 
Рисунок 1 – UML діаграма прецедентів для серверної частини системи

1.2.3	
Створено ER діаграму даних для серверної частини системи, що представлена на рисунку 2.
 
Рисунок 2 - ER діаграма даних для серверної частини системи

1.2.4	Розробити базу даних (БД) програмної системи. 
Було розроблено базу даних програмної системи за допомогою наступних запитів: 
-- Створення бази даних
CREATE DATABASE smart_plant_care;

-- Використання бази даних
USE smart_plant_care;

-- Таблиця користувачів
CREATE TABLE Users (
    UserID SERIAL PRIMARY KEY,
    Username VARCHAR(50) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    PasswordHash VARCHAR(255) NOT NULL,
    Role VARCHAR(10) DEFAULT 'user'
);

-- Таблиця рослин
CREATE TABLE Plants (
    PlantID SERIAL PRIMARY KEY,
    UserID INT NOT NULL,
    PlantName VARCHAR(50) NOT NULL,
    PlantType VARCHAR(50) NOT NULL,
    AddedDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);

-- Таблиця пристроїв
CREATE TABLE Devices (
    DeviceID SERIAL PRIMARY KEY,
    UserID INT NOT NULL,
    DeviceType VARCHAR(10) NOT NULL,
    Location VARCHAR(100),
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);

-- Таблиця даних із сенсорів
CREATE TABLE SensorData (
    DataID SERIAL PRIMARY KEY,
    DeviceID INT NOT NULL,
    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    SoilMoisture DECIMAL(5, 2) NOT NULL,
    LightLevel DECIMAL(5, 2) NOT NULL,
    Temperature DECIMAL(5, 2) NOT NULL,
    Humidity DECIMAL(5, 2) NOT NULL,
    FOREIGN KEY (DeviceID) REFERENCES Devices(DeviceID) ON DELETE CASCADE
);

-- Таблиця сповіщень
CREATE TABLE Notifications (
    NotificationID SERIAL PRIMARY KEY,
    UserID INT NOT NULL,
    Message TEXT NOT NULL,
    CreatedDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Status VARCHAR(10) DEFAULT 'unread',
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);

-- Таблиця налаштувань
CREATE TABLE Settings (
    SettingID SERIAL PRIMARY KEY,
    UserID INT NOT NULL,
    WateringSchedule VARCHAR(255) NOT NULL,
    LightPreferences VARCHAR(255),
    TemperatureRange VARCHAR(50),
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);

1.2.5	Розробити функції роботи з БД (ORM або CoRM тощо).
Було розроблено такі функції для роботи з базою даних за допомогою ORM SQLAlchemy, як створення користувачів (створення нового запису в таблиці Users), авторизація користувачів (перевірка облікових даних та повернення інформації про користувача), додавання рослин (зв’язок рослини з користувачем та внесення інформації до таблиці Plants), отримання списку рослин користувача, додавання пристроїв (реєстрація сенсорів та актюаторів у таблиці Devices), збереження даних сенсорів (запис виміряних значень у таблицю SensorData), отримання останніх даних сенсорів для конкретного пристрою, створення сповіщень для користувачів на основі даних сенсорів,
отримання списку сповіщень та їх статусу, оновлення налаштувань поливу, освітлення та температури для користувача.

1.2.6	Розробити API (REST або GraphQL, gRPC тощо) для взаємодії серверної частини з клієнтами.
Було розроблено API для взаємодії серверної частини з клієнтами, яке включає наступні функціональні можливості: реєстрацію та авторизацію користувачів, управління їхніми профілями, додавання та видалення рослин, моніторинг стану ґрунту та повітря за допомогою сенсорів, управління пристроями поливу та освітлення, а також налаштування параметрів догляду за рослинами.
API реалізує функціонал реєстрації нового користувача, автентифікації через JWT-токени, додавання рослин до особистого кабінету, перегляду інформації про рослини, а також їх редагування або видалення. Крім того, передбачено можливість підключення пристроїв, які збирають дані про вологість ґрунту, температуру, рівень освітлення та вологість повітря. Отримані дані зберігаються у базі даних і можуть бути використані для автоматичного керування системою поливу та освітлення відповідно до заданих користувачем параметрів.
API дозволяє отримувати історію змін параметрів догляду за рослинами у вигляді графіків, а також надсилає користувачеві сповіщення у разі критичних змін умов (наприклад, недостатня вологість ґрунту, занадто висока температура або нестача світла). Додатково реалізовано можливість налаштування розкладу поливу, вибору світлового режиму для стимуляції росту рослин, а також редагування індивідуальних налаштувань для різних типів рослин.
Таким чином, розроблене API забезпечує повний цикл автоматизованого догляду за рослинами, включаючи збір, обробку та аналіз даних, управління пристроями, сповіщення користувачів та інтеграцію з мобільним застосунком для зручного налаштування системи.

1.2.7	Створити специфікацію розробленого API.
Було створено специфікацію розробленого API. Специфікація наведена в таблиці 1.

Таблиця 1 – Специфікація API
Метод	Маршрут	Опис
Аутентифікація та користувачі		
POST	/auth/register	Реєстрація нового користувача
POST	/auth/login	Аутентифікація користувача, отримання JWT-токена
GET	/users/me	Отримання інформації про поточного користувача
PUT	/users/me	Оновлення профілю користувача
Управління рослинами		
POST	/plants/	Додавання нової рослини
GET	/plants/	Отримання списку рослин користувача
GET	/plants/{plant_id}	Отримання детальної інформації про рослину
PUT	/plants/{plant_id}	Оновлення інформації про рослину
DELETE	/plants/{plant_id}	Видалення рослини
Управління пристроями		
POST	/devices/	Додавання нового пристрою
GET	/devices/	Отримання списку підключених пристроїв
GET	/devices/{device_id}	Отримання інформації про конкретний пристрій
DELETE	/devices/{device_id}	Видалення пристрою
Дані сенсорів		
POST	/sensors/data	Надсилання показників сенсорів (вологість ґрунту, температура, освітленість)
GET	/sensors/data/{device_id}	Отримання останніх показників сенсора
Налаштування та сповіщення		
GET	/notifications/	Отримання списку сповіщень користувача
PUT	/notifications/{notification_id}	Позначення сповіщення як прочитаного
GET	/settings/	Отримання налаштувань поливу, освітлення, температури
PUT	/settings/	Оновлення налаштувань користувача

1.2.8	Створити програмну реалізацію розробленого API та функцій роботи з БД.
Програмну реалізацію API та функцій роботи з базою даних реалізовано у файлах app.py, errors.py, models.py та request_models.py. Файл app.py відповідає за ініціалізацію Flask-додатку та маршрути API, а також автентифікацію через JWT. У models.py визначені моделі для таблиць користувачів, пристроїв, конфігурацій та звітів, які взаємодіють з базою даних через SQLAlchemy. Файл errors.py обробляє помилки запитів, а request_models.py займається валідацією вхідних даних. API забезпечує повний функціонал для керування користувачами та пристроями, включаючи операції CRUD і захист через JWT.

1.2.9 Перевірити роботу створеного програмного коду серверної частини системи.
Було проведено перевірку роботи створеного програмного коду серверної частини системи за допомогою Swagger. Для кожного маршруту було виконано тестові HTTP-запити, включно з методами GET, POST, PUT, PATCH та DELETE, що відповідають функціоналу для сутностей Users, Plants, Devices, SensorData, Notifications та Settings. Перевірено правильність роботи запитів для отримання даних, створення нових ресурсів, оновлення та часткових оновлень, а також для видалення записів. Всі запити повертають коректні HTTP-статуси, наприклад, 200 OK для успішних операцій, 201 Created для успішно створених ресурсів, 400 Bad Request для помилок валідації, 404 Not Found для запитів до неіснуючих ресурсів і 500 Internal Server Error для внутрішніх помилок сервера. Був підтверджений коректний процес валідації вхідних даних, що дозволяє захистити сервер від некоректних запитів. Виявлені незначні помилки в обробці специфічних запитів, такі як обробка пустих значень для деяких параметрів, які будуть виправлені в наступних оновленнях. Усі маршрути працюють стабільно, і сервер коректно обробляє різні типи HTTP-запитів для кожної сутності в системі. Таким чином, тестування API підтвердило його працездатність і готовність до подальшого використання в реальному середовищі.

1.3 Висновки
У результаті виконаної роботи було успішно розроблено серверну частину системи на базі Flask, яка забезпечує ефективну взаємодію з базою даних та обробку запитів через RESTful API для сутностей, таких як Users, Plants, Devices, SensorData, Notifications, Settings. Для забезпечення коректності і безпеки роботи API було налаштовано валідацію вхідних даних за допомогою бібліотеки Marshmallow, що дозволило захистити сервер від некоректних або шкідливих запитів. Тестування API через Swagger підтвердило правильну роботу всіх методів (GET, POST, PUT, PATCH, DELETE) і коректне повернення HTTP статусів для кожного запиту. Під час тестування були виявлені незначні помилки, які були виправлені. Загалом, система продемонструвала стабільну роботу, що дозволяє використовувати API для взаємодії з сервером. Однак, можливі подальші вдосконалення, зокрема інтеграція більш складних методів автентифікації та розширення функціональності API для більш складних сценаріїв. Система є стабільною, безпечною та готовою до подальшого розгортання в реальному середовищі.

