Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук


Кафедра програмної інженерії



ЗВІТ
до лабораторної роботи №1
з дисципліни «Аналіз та рефакторинг коду»


Виконав:
ст. гр. ПЗПІ-22-6,
Шеремет Андрій Григорович


Перевірив:
ст. викладач каф. ПІ,
Сокорчук Ігор Петрович




Харків 2025

1 РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (API)

1.1 Мета роботи
Метою роботи є розробка бази даних для серверної частини програмної системи та прикладного програмного інтерфейсу. 

1.2 Хід роботи
1.2.1	Розробити будову програмної системи.
Програмна система має клієнт-серверну архітектуру. Серверна частина реалізована за допомогою фреймворку Flask на мові програмування Python. Для збереження даних використовується база даних PostgreSQL. Автентифікація користувачів відбувається через JWT токени.
Серверна частина складається з наступних модулів:
1. Авторизація.
	Вхід та реєстрація користувачів із використанням хешування паролів.
	Видача та перевірка JWT токенів для аутентифікації та захисту API-запитів.
2. Керування профілями користувачів
	Перегляд інформації про користувача (ім'я, email, роль).
	Редагування профілю користувача (оновлення email, пароля тощо).
	Управління ролями користувачів (адміністратор, звичайний користувач).
3. Керування IoT-пристроями
	Додавання нових IoT-сенсорів до системи (прив’язка до користувача).
	Редагування параметрів сенсорів (назва, статус, конфігурація автоматизації).
	Перегляд списку пристроїв, підключених до системи.
	Видалення пристроїв за запитом користувача або адміністратора.
4. Збір даних з IoT-сенсорів
	Автоматичне отримання сигналів руху від IoT-пристроїв через MQTT-протокол.
	Збереження подій активації/деактивації освітлення у базі даних.
	Ведення журналу подій для подальшої аналітики.
5. Генерація аналітичних звітів
	Створення звітів про енергоспоживання на основі історії роботи IoT-сенсорів.
	Візуалізація даних про використання електроенергії (графіки, таблиці).
	Генерація звітів про потенційну економію електроенергії.
6. Налаштування освітлення
	Додавання та редагування графіків роботи освітлення (час включення/вимкнення).
	Віддалене керування освітленням у реальному часі (увімкнення, вимкнення).
	Перегляд статусу освітлення (активне/неактивне).
7. Адміністрування
	Перегляд, редагування та видалення інформації про користувачів.
	Управління IoT-сенсорами (системні та користувацькі).
	Моніторинг стану системи:
	Перевірка активності пристроїв.
	Відстеження журналів подій.

1.2.2	Створити UML діаграму прецедентів для серверної частини системи.
Створено UML діаграму прецедентів для серверної частини системи, що представлена на рисунку 1.
  
Рисунок 1 – UML діаграма прецедентів для серверної частини системи

1.2.3	Створити ER діаграму даних.
Створено ER діаграму даних для серверної частини системи, що представлена на рисунку 2.
 
Рисунок 2 - ER діаграма даних для серверної частини системи

1.2.4	Розробити базу даних (БД) програмної системи. 
Було розроблено базу даних програмної системи за допомогою наступних запитів: 
1. Створення таблиці users:
 1   CREATE TABLE users (
 2       id SERIAL PRIMARY KEY,
 3       email VARCHAR(255) NOT NULL UNIQUE,
 4       password VARCHAR(64) NOT NULL,
 5       first_name VARCHAR(64) NOT NULL,
 6       last_name VARCHAR(64) NOT NULL,
 7       is_admin BOOLEAN DEFAULT FALSE
 8   );
2. Створення таблиці sessions
 1   CREATE TABLE sessions (
 2       id SERIAL PRIMARY KEY,
 3       user_id INTEGER NOT NULL REFERENCES users(id)
 4   );
3. Створення таблиці iot_devices
 1   CREATE TABLE iot_devices (
 2       id SERIAL PRIMARY KEY,
 3       user_id INTEGER NOT NULL REFERENCES users(id),
 4       name VARCHAR(64) NOT NULL,
 5       api_key VARCHAR(32) NOT NULL UNIQUE
 6   );
4. Створення таблиці device_configurations
 1   CREATE TABLE device_configurations (
 2       id SERIAL PRIMARY KEY,
 3       device_id INTEGER NOT NULL REFERENCES iot_devices(id),
 4       enabled BOOLEAN NOT NULL DEFAULT TRUE,
 5       enabled_auto BOOLEAN NOT NULL DEFAULT TRUE,
 6       electricity_price FLOAT NOT NULL
 7   );
5. Створення таблиці device_schedule
 1   CREATE TABLE device_schedule (
 2       id SERIAL PRIMARY KEY,
 3       device_id INTEGER NOT NULL REFERENCES iot_devices(id),
 4       start_hour INTEGER NOT NULL,
 5       end_hour INTEGER NOT NULL
 6   );
6. Створення таблиці device_reports
 1   CREATE TABLE device_reports (
 2       id SERIAL PRIMARY KEY,
 3       device_id INTEGER NOT NULL REFERENCES iot_devices(id),
 4       time TIMESTAMP NOT NULL,
 5       enabled BOOLEAN NOT NULL,
 6       enabled_for INTEGER DEFAULT NULL
 7   );

1.2.5	Створити діаграму структури БД. 
Створено діаграму структури БД, що представлена на рисунку 3.
 
Рисунок 3 – Діаграма структури бази даних

1.2.6	Розробити функції роботи з БД (ORM або CoRM тощо).
Було розроблено такі функції для роботи з базою даних за допомогою ORM SQLAlchemy, як отримання всіх користувачів, отримання користувача за email, додавання, оновлення та видалення користувача; отримання всіх IoT-пристроїв, отримання пристрою за ID, додавання, оновлення та видалення пристрою, отримання пристроїв, прив’язаних до конкретного користувача; отримання всіх конфігурацій пристроїв, отримання конфігурації за ID, додавання, оновлення та видалення конфігурації; отримання всіх розкладів роботи пристроїв, отримання розкладу за ID, додавання, оновлення та видалення розкладу, отримання розкладів для конкретного пристрою; отримання всіх даних активності пристроїв, отримання даних за ID, додавання, оновлення та видалення даних, отримання даних для конкретного пристрою; отримання всіх звітів про роботу пристроїв, отримання звіту за ID, додавання нового звіту, оновлення та видалення звіту, отримання звітів за конкретним користувачем або пристроєм.
Ці функції забезпечують повний цикл роботи з базою даних, включаючи операції створення, читання, оновлення та видалення (CRUD). Реалізація функцій базується на використанні моделей, що відображають структуру бази даних, що дозволяє зручно інтегрувати їх із серверною логікою програмної системи.

1.2.7	Розробити API (REST або GraphQL, gRPC тощо) для взаємодії серверної частини з клієнтами.
Було розроблено RESTful API для взаємодії серверної частини з клієнтами, яке включає наступні функціональні можливості: отримання, додавання, оновлення та видалення даних для таблиць Users, Sessions, IotDevices, DeviceConfigurations, DeviceSchedule та DeviceReports. API підтримує запити на отримання конкретних записів за ID, фільтрацію за такими параметрами, як ID користувача, статус пристрою, параметри конфігурації або періоди активності пристроїв.
API реалізує функціонал керування користувачами, включаючи реєстрацію, авторизацію, отримання інформації про користувача та оновлення профілю. Для роботи з IoT-пристроями доступні операції додавання, редагування, видалення пристроїв, а також отримання їх списку. Конфігурації пристроїв можуть бути створені, оновлені або видалені. Крім того, API дозволяє управляти розкладами роботи пристроїв, забезпечуючи функціональність додавання нового розкладу, редагування існуючого або видалення за необхідності.
Для збору даних про активність пристроїв API підтримує додавання нових записів активності, отримання звітів за конкретний період або за пристроєм, а також видалення застарілих записів. Усі операції реалізовані за допомогою методів HTTP: GET, POST, PUT та DELETE. Відповіді API формуються у форматі JSON, що забезпечує просту інтеграцію з клієнтськими додатками.
Для забезпечення безпеки всі ендпоінти API захищені JWT токенами, що гарантує доступ лише авторизованим користувачам. Цей API побудований відповідно до принципів RESTful архітектури, що забезпечує масштабованість і зручність використання для інтеграції з клієнтськими додатками.

1.2.8	Створити специфікацію розробленого API.
Було створено специфікацію розробленого API. Специфікація наведена в таблиці 1.

Таблиця 1 – Специфікація API
Метод	Маршрут	Опис
GET	/api/admin/devices	Отримання списку всіх IoT-пристроїв, підключених до системи.
DELETE	/api/admin/devices/{device_id}	Видалення конкретного IoT-пристрою за його ID.
GET	/api/admin/devices/{device_id}	Отримання інформації про конкретний IoT-пристрій за його ID.
PATCH	/api/admin/devices/{device_id}	Оновлення інформації про IoT-пристрій за його ID.
GET	/api/admin/users	Отримання списку всіх користувачів системи.
DELETE	/api/admin/users/{user_id}	Видалення конкретного користувача за його ID.
GET	/api/admin/users/{user_id}	Отримання інформації про конкретного користувача за його ID.
PATCH	/api/admin/users/{user_id}	Оновлення профілю користувача за його ID.
POST	/api/auth/login	Авторизація користувача та отримання JWT токену.
POST	/api/auth/register	Реєстрація нового користувача.
GET	/api/device/config	Отримання конфігурації пристрою.
POST	/api/device/report	Створення звіту про роботу пристрою.
GET	/api/device/schedule	Отримання розкладу роботи пристроїв.
GET	/api/devices	Отримання списку всіх IoT-пристроїв.
POST	/api/devices	Додавання нового IoT-пристрою в систему.
DELETE	/api/devices/{device_id}	Видалення конкретного IoT-пристрою за його ID.
GET	/api/devices/{device_id}	Отримання інформації про конкретний IoT-пристрої за його ID.
PATCH	/api/devices/{device_id}	Оновлення інформації про IoT-пристрої за його ID.
GET	/api/devices/{device_id}/analytics	Отримання аналітики по конкретному IoT-пристрою.
PATCH	/api/devices/{device_id}/config	Оновлення конфігурації конкретного IoT-пристрою.
GET	/api/devices/{device_id}/reports	Отримання звітів по конкретному IoT-пристрою.
GET	/api/devices/{device_id}/schedule	Отримання розкладу роботи конкретного IoT-пристрою.
POST	/api/devices/{device_id}/schedule	Додавання нового розкладу для конкретного IoT-пристрою.
DELETE	/api/devices/{device_id}/schedule/{schedule_id}	Видалення конкретного розкладу для IoT-пристрою.

1.2.9	Створити програмну реалізацію розробленого API та функцій роботи з БД.
Програмну реалізацію API та функцій роботи з базою даних реалізовано у файлах app.py, errors.py, models.py та request_models.py. Файл app.py відповідає за ініціалізацію Flask-додатку та маршрути API, а також автентифікацію через JWT. У models.py визначені моделі для таблиць користувачів, пристроїв, конфігурацій та звітів, які взаємодіють з базою даних через SQLAlchemy. Файл errors.py обробляє помилки запитів, а request_models.py займається валідацією вхідних даних. API забезпечує повний функціонал для керування користувачами та пристроями, включаючи операції CRUD і захист через JWT.

1.2.10	 Перевірити роботу створеного програмного коду серверної частини системи.
Було проведено перевірку роботи створеного програмного коду серверної частини системи за допомогою Swagger. Для кожного маршруту було виконано тестові HTTP-запити, включно з методами GET, POST, PUT, PATCH та DELETE, що відповідають функціоналу для сутностей Users, Sessions, IotDevices, DeviceConfigurations, DeviceSchedule та DeviceReports. 
На рисунку 4 показано приклад тестування API для реєстрації користувача через Swagger. Запит використовує метод POST для реєстрації нового користувача. В поле «Request body» передаються дані, такі як ім'я, електронна пошта та пароль, які сервер обробляє і створює нового користувача. Відповідь від сервера містить статус успішного виконання запиту (HTTP 200) та інформацію про створеного користувача.

Рисунок 4 – Приклад тестування API (реєстрація користувача)

На рисунках 5-7 зображено тестування API для створення нового пристрою (метод POST), отримання списку існуючих девайсів (метод GET) та отримання конкретного пристрою за його ID (метод GET). Вони демонструють, як відправляються запити для додавання нового пристрою в систему та для отримання інформації про вже існуючі пристрої. Відповіді від сервера містять відповідну інформацію, що підтверджує успішне виконання запиту, включаючи деталі пристроїв.

Рисунок 5 – Приклад тестування API (створення нового пристрою)

Рисунок 6 – Приклад тестування API (отримання списку існуючих девайсів)
 
Рисунок 7 – Приклад тестування API (отримання конкретного пристрою за його ID)

1.3 Висновки


1.4 Список використаних джерел 
1. PostgreSQL – офіційна документація. URL: https://www.postgresql. org/docs/ (дата звернення: 19.12.2024).
2. Swagger – офіційний сайт. URL: https://swagger.io/ (дата звернення: 19.12.2024).
3. Python – офіційний сайт. URL: https://www.python.org/ (дата звернення: 19.12.2024).
4. Flask – офіційна документація. URL: https://flask.palletsprojects.com/ (дата звернення: 19.12.2024).
5. SQLAlchemy – офіційна документація. URL: https://www.sqlalchemy.org/ (дата звернення: 19.12.2024).

1.5 Посилання
Посилання на GitHub репозиторій: 
https://github.com/andrii-sheremet/arkpz-pzpi-22-6-sheremet-andrii/tree/main/Task2